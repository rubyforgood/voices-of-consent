# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe InventoryTypesController, type: :controller do
  has_authenticated_user
  render_views

  # This should return the minimal set of attributes required to create a valid
  # InventoryType. As you add validations to InventoryType, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: Faker::House.furniture.titleize, description: Faker::Lorem.sentence
    }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InventoryTypesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      InventoryType.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #index as :json' do
    it 'returns a success response' do
      InventoryType.create! valid_attributes
      get :index, params: { format: :json }
      expect(response).to be_successful
      expect(JSON.parse(response.body).length).to eq(1)
      expect(JSON.parse(response.body)[0]).to have_key('name')
    end

    context 'when there are multiple records for the inventory type' do
      let(:unordered_name_list) { %w[Sanitary\ Pads Blankets First\ Aid\ Kit] }
      let(:ordered_name_list) { %w[Blankets First\ Aid\ Kit Sanitary\ Pads] }

      before do
        unordered_name_list.each do |inventory_name|
          options = { name: inventory_name, description: Faker::Lorem.sentence }
          InventoryType.create! options
        end
      end

      it 'returns the inventory type list in alphabetical order of name' do
        get :index, params: { format: :json }
        types = JSON.parse(response.body).map { |inventory| inventory['name'] }
        expect(types).to eql(ordered_name_list)
      end
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      inventory_type = InventoryType.create! valid_attributes
      get :show, params: { id: inventory_type.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      inventory_type = InventoryType.create! valid_attributes
      get :edit, params: { id: inventory_type.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new InventoryType' do
        expect do
          post :create,
               params: { inventory_type: valid_attributes },
               session: valid_session
        end.to change(InventoryType, :count).by(1)
      end

      it 'redirects to the created inventory_type' do
        post :create,
             params: { inventory_type: valid_attributes },
             session: valid_session
        expect(response).to redirect_to(InventoryType.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create,
             params: { inventory_type: invalid_attributes },
             session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested inventory_type' do
        inventory_type = InventoryType.create! valid_attributes
        put :update,
            params: {
              id: inventory_type.to_param, inventory_type: new_attributes
            },
            session: valid_session
        inventory_type.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the inventory_type' do
        inventory_type = InventoryType.create! valid_attributes
        put :update,
            params: {
              id: inventory_type.to_param, inventory_type: valid_attributes
            },
            session: valid_session
        expect(response).to redirect_to(inventory_type)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        inventory_type = InventoryType.create! valid_attributes
        put :update,
            params: {
              id: inventory_type.to_param, inventory_type: invalid_attributes
            },
            session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested inventory_type' do
      inventory_type = InventoryType.create! valid_attributes
      expect do
        delete :destroy,
               params: { id: inventory_type.to_param }, session: valid_session
      end.to change(InventoryType, :count).by(-1)
    end

    it 'redirects to the inventory_types list' do
      inventory_type = InventoryType.create! valid_attributes
      delete :destroy,
             params: { id: inventory_type.to_param }, session: valid_session
      expect(response).to redirect_to(inventory_types_url)
    end
  end
end
